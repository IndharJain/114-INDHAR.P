javaScript --->open source,oops,dynamic typed lang
               providing intractiy into client side web pages
               Just In Time compilation
	       first class function

webclient--> bunch of html web pages.

JS became to be used into both client as well as sever

Node.js--> run time enviorment for running js apllication into server side.

Frontend--->angular js(framewrok now), vue.js,React.js
		
backend-->chart.js, express.js			




					Angular vs React

angular - framewrok/library		 React-Tyescript/javascript	


--------------------------------

variable--> placeholder 
---------------------------------
Function
--------
/*
WAP to calculate grade of a student who score 68% marks, 
90-100 --> A
80-90 --> B
70-80 --> C
otherwise Failed.
*/
function percentage(score)
{
  
if(score>=90)
{
  console.log("A Grade");
}
else if(score>=80 & score<=90)
  {
    console.log("B Grade");
  }
else if(score>=70 & score<=80)
  {
    console.log("C Grade")
  }
else
  {
    console.log("Failed")
  }
}

percentage(100);


----------------------------------------
ARRAY
-----

//calculate sqaue of all items and give new array?
a= [1,2,3,4,5];
//calculate sqaue of all items and give new array?
a= [1,2,3,4,5];

for(i=0; i<a.length; i++ ){
  console.log(a[i]**2);
}

WAP to create two resultant array one with even numbers and another with odd numbers.
a = [11,23,12,24,56,3,4,78,55]


// a = [11,23,12,24,56,3,4,78,55];

// for(i=0; i<a.length; i++ ){
//   if(a[i]%2===0){
//   console.log(a[i]+"  even");
//   }
//   else
//     {
//       console.log(a[i]+"  odd")
//     }
// }
-------------------
function EO([])
{
// a = [11,23,12,24,56,3,4,78,55];
even=[];
odd=[];
for(i=0; i<a.length; i++ ){
 if(a[i]%2==0){
   even.push(a[i]);
 }
  else
    {
      odd.push(a[i]);
      
    }
 }
console.log("Even =",even);
console.log("odd =",odd);
}
EO([11,23,12,24,56,3,4,78,55]);
-------------------
function EO(a)
{
  var a=[1,2,3,4,5];
  
  var Even=a.filter(i=>i%2==0);
  var Odd=a.filter(j=>j%2!==0);
  
  return{Even,Odd};
}
EO();


---------------------------------------------------------------------------------------------------------
JavaScript --> open source, oops, dynamic typed language --> providing interactiy into client side web pages --> JIT compilation --> first class function

webclient --> bunch of HTML web pages

JS became to be used into both client as well as server

Node.js --> run time enviornment for running your JS application into server side.

client - server

Frontend --> Angular/React.js/Vue.js

backend --> Express.js


Angular vs React
Framework / Library
typescript / javascript

Java vs JavaScript --> javascript has nothing to do with java

dynamic typed language --> you don't need to specify type of a variable in javascript, whichever value is assigned it takes that value.
python, js

static typed language --> c, c++,java

//console.log("Hello world");

//console.log('Hello world');

//variable --> placeholder
a = 10;
console.log(typeof a);

a = "Rajesh";

console.log(typeof a);

first class function
//defining function

function addition(a,b){
  console.log(a+b);
}

//calling the function
addition(10,15);


//first class function
//using function assignment like we use variable 
add = function addition(a,b){
  console.log(a+b);
}

console.log(typeof add);
add(25,35);
//console.log(add(25,35));


//Array -- collection of items

a = [1,23,4,5];
a = [1,2,true,"Rajesh",{}];

console.log(a);

//calculate sqaue of all items and give new array?
a= [1,2,3,4,5];

for(i=0; i<a.length; i++ ){
  console.log(a[i]**2);
}

//Array -- collection of items

a = [1,23,4,5];
a = [1,2,true,"Rajesh",{}];

console.log(a);

//calculate sqaue of all items and give new array?
a= [1,2,3,4,5];

c = a.map( i => i**2);

console.log(c);

d = a.reduce( (i,j) => i+j)

console.log(d);

e= a.filter( i => i%2==0);

console.log(e);


function return
function addition(a,b){
  console.log(a+b);
}

addition(10,20) + 50;

function addition1(a,b){
  return a+b;
}

addition1(10,20) + 50;

//return multiple output as array or object
function calculator(a,b){
  add = a+b;
  sub = b-a;
  
  return {add,sub};
}

console.log(calculator(10,30));

//return multiple output as array or object
function calculator(a,b){
  add = a+b;
  sub = b-a;
  
  return {add,sub};
}

//var {result1,result2} = calculator(10,30);

//destructuring as an object
var {add,sub} = calculator(10,30);

console.log(add);
console.log(sub);

//console.log(calculator(10,30));

//return multiple output as array or object
function calculator(a,b){
  add = a+b;
  sub = b-a;
  
  return [add,sub];
}

//destructuring as array
var [result1,result2] = calculator(10,30);

//console.log(typeof result1);
console.log(result1);
console.log(result2);

//console.log(calculator(10,30));
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
// class calculator21{
  
//   constructor(a,b)
//   {
//     this.a=a;
//     this.b=b;
//   }
  
//   add(){
//     return this.a+this.b;
//   }
  
//   sub(){
//     return this.a-this.b;
//   }
  
//   mul()
//   {
//     return this.a*this.b;
//   }
  
//   div()
//   {
//     return this.a/this.b;
//   }
// }

obj = new calculator21(10,5);
console.log(obj.add());
console.log(obj.sub());
console.log(obj.mul());
console.log(obj.div());
